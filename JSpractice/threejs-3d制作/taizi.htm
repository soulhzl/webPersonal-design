<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Document</title>
	<link rel="stylesheet" type="text/css" href="../reset.css">
	<style>body{overflow: hidden;}canvas { width: 100%; height: 100% }</style>
	<script src="./three.min.js"></script>
</head>
<body>
	<div id="Stats-output"></div>
	<script type="text/javascript">
        var point1 = 0;
        var point2 = 0;
        var point3 = 0;
        var point4 = 0;
        var point5 = 0;
        var point6 = 0;
        window.addEventListener('keydown', function(e) {
          switch(e.keyCode){
            case 65:
            point1 -= 0.1;
            break;
            case 68:
            point1 += 0.1;
            break;
            case 81:
            point2 -= 0.1;
            break;
            case 69:
            point2 += 0.1;
            break;
            case 87:
            point3 -= 0.1;
            break;
            case 83:
            point3 += 0.1;
            break;
            case 84:
            point4 += 0.1;
            break;
            case 71:
            point4 -= 0.1;
            break;
            case 89:
            point5 += 0.1;
            break;
            case 72:
            point5 -= 0.1;
            break;
            case 85:
            point6 += 0.1;
            break;
            case 74:
            point6 -= 0.1;
            break;
        }
    }, false);
        // 创建三维图
        var scene = new THREE.Scene();

        var camera = new THREE.PerspectiveCamera(45, window.innerWidth/window.innerHeight, 0.1, 1000);

        var renderer = new THREE.WebGLRenderer();

        renderer.setClearColor(new THREE.Color(0x404040 ));
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.shadowMap.enabled = true;
        renderer.shadowMap.type = THREE.PCFSoftShadowMap;

        var xianGroup = new THREE.Group();
        var geometry = new THREE.Geometry();
        geometry.vertices.push(new THREE.Vector3(-500, 0, 0));
        geometry.vertices.push(new THREE.Vector3(500, 0, 0));

        for (var i = 0; i <= 36; i++) {
                //画横线
                var line = new THREE.Line(geometry, new THREE.LineBasicMaterial({
                    color: 0x000000
                }));
                if (i == 15) {
                    line = new THREE.Line(geometry, new THREE.LineBasicMaterial({
                        color: 0xff0000
                    }));
                }
                line.position.z = (i * 5) - 90;
                xianGroup.add(line);


                var line1 = new THREE.Line(geometry, new THREE.LineBasicMaterial({
                    color: 0x000000
                }));
                if (i == 18) {
                    line1 = new THREE.Line(geometry, new THREE.LineBasicMaterial({
                        color: 0xff0000
                    }));
                }
                line1.position.x = (i * 5) - 90;
                line1.rotation.y = 90 * Math.PI / 180; //转90度
                xianGroup.add(line1);

            }

            // scene.add(xianGroup);

            var size = 100;
            var divisions = 50;

            var gridHelper = new THREE.GridHelper( size, divisions );
            gridHelper.position.y = 40;
            gridHelper.position.z = 10;
            scene.add( gridHelper );

            var geometry = new THREE.PlaneGeometry( window.innerWidth, window.innerHeight, 32 );
            var material = new THREE.MeshBasicMaterial( {color: 0x000000, side: THREE.DoubleSide} );
            var plane = new THREE.Mesh( geometry, material );
            plane.rotation.x = 4.7;
            plane.position.y = 20;
            // scene.add( plane );

            var group = new THREE.Group();
            var xzgroup = new THREE.Group();
            var ygroup = new THREE.Group();


        // 蓝色支架
        var geometry1 = new THREE.BoxGeometry( 3, 7, 3 );
        var material1 = new THREE.MeshLambertMaterial( {color: 0x7d7dff} );
        var cube1 = new THREE.Mesh( geometry1, material1 );
        group.add( cube1 );
        cube1.position.x = -3.5;
        cube1.position.y = 3.5;
        cube1.position.z = -21;

        var geometry2 = new THREE.BoxGeometry( 3, 7, 3 );
        var material2 = new THREE.MeshLambertMaterial( {color: 0x7d7dff} );
        var cube2 = new THREE.Mesh( geometry2, material2 );
        group.add( cube2 );
        cube2.position.x = -3.5;
        cube2.position.y = 3.5;
        cube2.position.z = 55-24;

        // 蓝色支架上横条
        var geometry3 = new THREE.BoxGeometry( 3, 2, 55 );
        var material3 = new THREE.MeshLambertMaterial( {color: 0xffff37} );
        var cube3 = new THREE.Mesh( geometry3, material3 );
        group.add( cube3 );
        cube3.position.x = -3.5;
        cube3.position.y = 8;
        cube3.position.z = 0.5*55-22.5;

        // Y轴滚动条
        var geometry4 = new THREE.BoxGeometry( 60, 2, 3 );
        var material4 = new THREE.MeshLambertMaterial( {color: 0x82d900} );
        var cube4 = new THREE.Mesh( geometry4, material4 );
        ygroup.add( cube4 );
        cube4.position.x = 25;
        cube4.position.y = 10;
        cube4.position.z = -21;

        // X轴滚动条
        var geometry5 = new THREE.BoxGeometry( 3, 14, 3 );
        var material5 = new THREE.MeshLambertMaterial( {color: 0xff9224} );
        var cube5 = new THREE.Mesh( geometry5, material5 );
        xzgroup.add( cube5 );
        cube5.position.x = -0.5;
        cube5.position.y = 13;
        cube5.position.z = -18;

        // 圆筒装饰
        var geometry6 = new THREE.CylinderGeometry( 1, 1, 3, 64 );
        var material6 = new THREE.MeshLambertMaterial( {color: 0xebd3e8} );
        var cylinder = new THREE.Mesh( geometry6, material6 );
        cylinder.position.x = -0.5;
        cylinder.position.y = 21.5;
        cylinder.position.z = -18;
        xzgroup.add( cylinder );

        var geometry7 = new THREE.CylinderGeometry( 0.8, 0.8, 2.5, 64 );
        var material7 = new THREE.MeshLambertMaterial( {color: 0xebd3e8} );
        var cylinder1 = new THREE.Mesh( geometry7, material7 );
        cylinder1.rotation.z = Math.PI/2;
        cylinder1.position.x = -6.2;
        cylinder1.position.y = 10;
        cylinder1.position.z = -21;
        ygroup.add( cylinder1 );

        // 框住Z轴动的板子
        var geometry8 = new THREE.BoxGeometry( 4, 1, 6 );
        var material8 = new THREE.MeshLambertMaterial( {color: 0xff9224} );
        var cube8 = new THREE.Mesh( geometry8, material8 );
        xzgroup.add( cube8 );
        cube8.position.x = 0;
        cube8.position.y = 5.5;
        cube8.position.z = -16.5;

        // Z轴滚动模块1
        var geometry9 = new THREE.CylinderGeometry( 1, 1, 3, 64 );
        var material9 = new THREE.MeshLambertMaterial( {color: 0xff9224} );
        var cube9 = new THREE.Mesh( geometry9, material9 );
        xzgroup.add( cube9 );
        cube9.position.x = 0;
        cube9.position.y = 6;
        cube9.position.z = -15;

        // Z轴滚动模块2
        var geometry10 = new THREE.CylinderGeometry( 1, 0, 2, 64 );
        var material10 = new THREE.MeshLambertMaterial( {color: 0xff9224} );
        var cube10 = new THREE.Mesh( geometry10, material10 );
        xzgroup.add( cube10 );
        cube10.position.x = 0;
        cube10.position.y = 3.5;
        cube10.position.z = -15;
        
        scene.add(group);
        scene.add(ygroup);
        scene.add(xzgroup);
        
        camera.position.x = 0;
        camera.position.y = 60;
        camera.position.z = 70;
        camera.lookAt(scene.position);

        var ambientLight = new THREE.AmbientLight( 0x404040 );
        var directionalLight1 = new THREE.DirectionalLight( 0xC0C090 );
        var directionalLight2 = new THREE.DirectionalLight( 0xC0C090 );

        directionalLight1.position.set( -100, -50, 100 );
        directionalLight2.position.set( 100, 50, -100 );
        var lightGroup = new THREE.Group();
        lightGroup.add( directionalLight1 );
        lightGroup.add( directionalLight2 );
        lightGroup.add( ambientLight );
        scene.add(lightGroup);
        console.log(scene.children);
        document.body.appendChild(renderer.domElement);
        var step = 0.05;
        function updateScene(){
           requestAnimationFrame(updateScene);
           renderer.render(scene, camera);
           // x轴动
           xzgroup.position.x = point1;
           // y轴动
           xzgroup.position.z = point3;
           ygroup.position.z = point3;
           // z轴动
           xzgroup.position.y = point2;
           // camera.position.x += step;
           // camera.position.y += step;
           // camera.position.z += step;
           
       }

       updateScene();




   </script>
</body>
</html>